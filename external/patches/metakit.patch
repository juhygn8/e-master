diff -urp metakit-latest/src/view.cpp metakit-latest.new/src/view.cpp
--- metakit-latest/src/view.cpp	2008-06-19 11:30:45.000000000 +0400
+++ metakit-latest.new/src/view.cpp	2008-09-24 16:15:40.000000000 +0400
@@ -857,18 +857,39 @@ int start_  ///< the index to start with
 }
 
 /** Search for a key, using the native sort order of the view
+ *
+ * The search is done as a binary search. The result will be
+ * incorrect if the properties being searched on are not in
+ * sequential order.
+ * .
  * @return position where found, or where it may be inserted,
  *  this position can also be just past the last row
  */
 int c4_View::Search(const c4_RowRef &crit_)const {
+  const c4_Sequence* const refSeq = c4_Cursor(&crit_)._seq;
+  c4_Bytes data;
   int l =  - 1, u = GetSize();
+
   while (l + 1 != u) {
-    const int m = (l + u) >> 1;
-    if (_seq->Compare(m, &crit_) < 0)
-    //if (crit_ > (*this)[m]) // Dec 2001: see comments below
-      l = m;
-    else
+    const int m = ((unsigned)(l + u)) >> 1;
+    
+    // Compare properties
+    int result = 0;
+    for (int i = 0; i < refSeq->NumHandlers(); ++i) {
+      c4_Handler& h = refSeq->NthHandler(i);
+
+      if (!_seq->Get(m, h.PropId(), data))
+        h.ClearBytes(data);
+      
+      result = h.Compare(0, data); // always row 0
+      if (result != 0)
+        break;
+    }
+
+    if (result < 0)
       u = m;
+    else
+      l = m;
   }
 
   return u;
diff -urp metakit-latest/tests/tbasic2.cpp metakit-latest.new/tests/tbasic2.cpp
--- metakit-latest/tests/tbasic2.cpp	2008-06-19 11:31:46.000000000 +0400
+++ metakit-latest.new/tests/tbasic2.cpp	2008-09-24 16:18:16.000000000 +0400
@@ -12,13 +12,18 @@ void TestBasics2() {
   B(b20, Search sorted view, 0) {
     c4_IntProp p1("p1");
     c4_StringProp p2("p2");
+    c4_IntProp p3("p3");
     c4_View v1;
-    v1.Add(p1[111] + p2["one"]);
-    v1.Add(p1[222] + p2["two"]);
-    v1.Add(p1[333] + p2["three"]);
-    v1.Add(p1[345] + p2["four"]);
-    v1.Add(p1[234] + p2["five"]);
-    v1.Add(p1[123] + p2["six"]);
+    v1.Add(p1[111] + p2["one"]   + p3[2]);
+    v1.Add(p1[222] + p2["two"]   + p3[4]);
+    v1.Add(p1[333] + p2["three"] + p3[8]);
+    v1.Add(p1[345] + p2["four"]  + p3[16]);
+    v1.Add(p1[234] + p2["five"]  + p3[32]);
+    v1.Add(p1[123] + p2["six"]   + p3[64]);
+    A(v1.Search(p3[4]) == 1);
+    A(v1.Search(p3[0]) == 0);
+    A(v1.Search(p3[6]) == 2);
+    A(v1.Search(p3[128]) == 6);
     c4_View v2 = v1.Sort();
     A(v2.GetSize() == 6);
     A(p1(v2[0]) == 111);
--- metakit-latest/include/mk4.inl.orig	2009-04-28 13:39:45.000000000 +0400
+++ metakit-latest.new/include/mk4.inl	2009-04-28 13:40:04.000000000 +0400
@@ -284,7 +284,7 @@ d4_inline bool operator!= (c4_Cursor a_,
 d4_inline bool operator< (c4_Cursor a_, c4_Cursor b_)
 {
   return a_._seq < b_._seq ||
-	  a_._seq == b_._seq && a_._index < b_._index;
+	  (a_._seq == b_._seq && a_._index < b_._index);
 }
 
 d4_inline bool operator> (c4_Cursor a_, c4_Cursor b_)
--- metakit-latest/src/viewx.cpp	Fri Mar 09 17:58:53 2007
+++ metakit-latest.new/src/viewx.cpp	Sat May 16 10:26:26 2009
@@ -530,20 +530,13 @@
     c4_Handler &h = _cursor._seq->NthHandler(colNum);
     const int n = buf_.Size();
     const t4_i32 limit = off_ + n; // past changed bytes
-    const t4_i32 overshoot = limit - h.ItemSize(_cursor._index);
-
-    if (diff_ < overshoot)
-      diff_ = overshoot;
 
     c4_Column *col = h.GetNthMemoCol(_cursor._index, true);
     if (col != 0) {
       if (diff_ < 0)
         col->Shrink(limit,  - diff_);
       else if (diff_ > 0)
-      // insert bytes in the highest possible spot
-      // if a gap is created, it will contain garbage
-        col->Grow(overshoot > 0 ? col->ColSize(): diff_ > n ? off_ : limit -
-          diff_, diff_);
+        col->Grow(off_, diff_);
 
       col->StoreBytes(off_, buf_);
     } else
